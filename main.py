import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# ----------------------------------------------------
# 1. Set Page Configuration (Must Be First Streamlit Command)
# ----------------------------------------------------
st.set_page_config(
    page_title="Telco Churn - Entrevista Vodacom",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ----------------------------------------------------
# 2. Load and Clean the Dataset
# ----------------------------------------------------
@st.cache_data
def load_data(file_path: str) -> pd.DataFrame:
    """
    Loads the telco dataset from a CSV file and fills specified columns' NaN with 'Unknown'.
    """
    df_ = pd.read_csv(file_path)
    cols_to_change = ['Churn Reason', 'Churn Category', 'Internet Type', 'Offer']
    df_[cols_to_change] = df_[cols_to_change].fillna('Unknown')
    return df_

# ----------------------------------------------------
# Tenure Bin Definitions
# ----------------------------------------------------
TENURE_BINS = [0, 6, 12, 24, 36, 48, 60, float('inf')]
TENURE_LABELS = [
    "0-6 months",
    "7-12 months",
    "13-24 months",
    "25-36 months",
    "37-48 months",
    "49-60 months",
    "61+ months"
]

def preprocess_data(df):
    df["Tenure Group"] = pd.cut(
        df["Tenure in Months"],
        bins=TENURE_BINS,
        labels=TENURE_LABELS,
        right=True
    )
    return df

# ----------------------------------------------------
# CLTV Trend Plot (Line Color Changed to Gold)
# ----------------------------------------------------
def plot_cltv_trend(df):
    # Ensure Tenure Group is in the correct (ordered) categorical format
    df["Tenure Group"] = pd.Categorical(
        df["Tenure Group"],
        categories=TENURE_LABELS,
        ordered=True
    )
    cltv_by_tenure = df.groupby("Tenure Group")["CLTV"].mean().reset_index()

    # Create the figure
    fig = px.line(
        cltv_by_tenure,
        x="Tenure Group",
        y="CLTV",
        markers=True,
        title="üìà CLTV Trend by Tenure Group",
        labels={"CLTV": "Average CLTV", "Tenure Group": "Tenure Group"}
    )
    fig.update_traces(line=dict(color="gold", width=3))
    fig.update_xaxes(tickangle=-45)

    # Use two columns: one for the chart, one for the legend
    col_chart, col_legend = st.columns([6, 1])  # To Adjust width ratio 

    with col_chart:
        st.plotly_chart(fig, use_container_width=True)

    with col_legend:
        st.markdown(
            """
            **Tenure Group Legend**  
            - 0-6 months = ~0-0.5 yr  
            - 7-12 months = ~0.5-1 yr  
            - 13-24 months = 1-2 yrs  
            - 25-36 months = 2-3 yrs  
            - 37-48 months = 3-4 yrs  
            - 49-60 months = 4-5 yrs  
            - 61+ months = 5+ yrs
            """
        )


# Load Data
df = load_data('telco.csv')

# ----------------------------------------------------
# 3. Main Title and Description
# ----------------------------------------------------
st.title("Telco Churn Analysis üìä")

st.write(
    "Bem-vindo ao **Dashboard de An√°lise Churn (Rotatividade) de Telecomunica√ß√µes!** üöÄ "
    
 "Este relat√≥rio interativo explora importantes insights sobre a rotatividade de clientes, ajudando-nos"
 "compreender as tend√™ncias, desafios e estrat√©gias para melhorar a reten√ß√£o."
)

st.markdown(
    "### üîç Principais descobertas:\n"
 "- **Servi√ßos de alta rotatividade**: Os servi√ßos de Internet, dados ilimitados e streaming apresentam as taxas de cancelamento mais elevadas. \n"
 "- **Tend√™ncias demogr√°ficas**: Os idosos e os clientes com contratos mensais s√£o os mais propensos a cancelar o servi√ßo. \n"
 "- ** Programas de lealdade, pre√ßos competitivos com base na localiza√ß√£o e uma comunica√ß√£o eficaz com o cliente podem ajudar a reduzir a rotatividade."
)

st.write("---")

# ----------------------------------------------------
# 4. Sidebar Filters (Gender & Churn Status)
# ----------------------------------------------------
with st.sidebar:
    st.header("Select Filters")
    st.write("üîç **Filtre os dados para explorar as tend√™ncias de rotatividade por g√©nero e o estado de rotatividade.** " 
             "Ajuste as op√ß√µes abaixo para analisar grupos espec√≠ficos de clientes.")
    
    gender_filter = st.radio("Seleccionar g√©nero", options=["All", "Male", "Female"], index=0)
    churn_filter = st.radio("Seleccionar estado de rotatividade", options=["Yes", "No"], index=0)

# ----------------------------------------------------
# 5. Filter the Data Based on Sidebar Selections
# ----------------------------------------------------
df_filtered = df.copy()

if gender_filter != "All":
    df_filtered = df_filtered[df_filtered["Gender"] == gender_filter].copy()

df_filtered = df_filtered[df_filtered["Churn Label"] == churn_filter].copy()

# ----------------------------------------------------
# 6. Section 1: Which Services Tend to Have High Churn?
# ----------------------------------------------------
st.subheader("Quest√£o 1: Que servi√ßos tendem a ter uma elevada rotatividade?")

service_columns = [
    "Phone Service", "Internet Service", "Multiple Lines",
    "Streaming TV", "Streaming Movies", "Streaming Music",
    "Online Security", "Online Backup", "Device Protection Plan",
    "Premium Tech Support", "Unlimited Data"
]

service_churn_dict = {}
for service in service_columns:
    service_users = df_filtered[df_filtered[service] == 'Yes']
    churn_count = service_users.shape[0]  # Already filtered to churn = Yes
    total_users = df[df[service] == 'Yes'].shape[0]
    churn_percentage = (churn_count / total_users * 100) if total_users > 0 else 0
    service_churn_dict[service] = churn_percentage

service_churn_df = pd.DataFrame(service_churn_dict, index=["Churn Percentage"]).T

col1, col2 = st.columns(2)

with col1:
    st.markdown("### Top 10 Servicos por Churn Rate")
    top_5_services = service_churn_df.sort_values(by="Churn Percentage", ascending=False).head(10)
    st.dataframe(top_5_services)

with col2:
    st.markdown("### Churn Percentage by Service")
    
    if not service_churn_df.empty:
        min_churn_percentage = service_churn_df["Churn Percentage"].min()
        max_churn_percentage = service_churn_df["Churn Percentage"].max()

        fig = px.bar(
            service_churn_df,
            x=service_churn_df.index,
            y="Churn Percentage",
            color="Churn Percentage",
            color_continuous_scale="viridis",
            labels={"x": "Service", "Churn Percentage": "Churn %"},
        )
        fig.update_layout(
            xaxis_title="Service",
            yaxis_title="Churn Percentage (%)",
            xaxis_tickangle=-45,
            yaxis_range=[min_churn_percentage - 5, max_churn_percentage + 5],
            margin=dict(l=10, r=10, t=40, b=50),
            coloraxis_showscale=False
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("No data available to plot. Try changing your filters.")

# Expansor para insights
with st.expander("üí° Clique para ver informa√ß√£o sobre a rotatividade por servi√ßo"):
    st.subheader("üìå Tend√™ncias gerais de cancelamento")
    st.write("**Conclus√£o:** Os servi√ßos com as maiores taxas de cancelamento s√£o Internet, Dados Ilimitados e Servi√ßos de Streaming.")

    st.subheader("üìå Cancelamento de Internet e Dados")
    st.write("**Conclus√£o:** Os clientes que utilizam o servi√ßo de Internet (31,83%) e Dados Ilimitados (31,65%) apresentam as taxas de cancelamento mais elevadas.")

    st.subheader("üìå Cancelamento de Servi√ßos de Streaming")
    st.write("**Conclus√£o:** Streaming de TV (30,07%), Streaming de Filmes (29,94%) e Streaming de M√∫sica (29,26%) registam altas taxas de cancelamento.")

st.write("---")

# ----------------------------------------------------
# Section 2: "What would we do to reduce churn?"
# ----------------------------------------------------
st.subheader("Quest√£o 2: O que far√≠amos para reduzir a churn?")

if df_filtered.empty:
    st.warning("No churned customers found based on the selected filters. Try adjusting the filters.")
else:
    churned_data_filtered = df_filtered[df_filtered['Churn Reason'] != 'Unknown'].copy()
    
    top_churn_reasons = churned_data_filtered['Churn Reason'].value_counts().head(10)
    # Top Churn Categories
    top_churn_categories = churned_data_filtered['Churn Category'].value_counts().head(5)

    col5, col6 = st.columns(2)

    with col5:
        st.markdown("### üèÜ 5 principais categorias de churn")
        df_top_categories = top_churn_categories.reset_index()
        df_top_categories.columns = ['Churn Category', 'Count']
        st.dataframe(df_top_categories, hide_index=True)

    with col6:
        st.markdown("### üåç Distribui√ß√£o geogr√°fica das 5 principais categorias de churn")
        if 'Latitude' in df_filtered.columns and 'Longitude' in df_filtered.columns:
            top_category_data = df_filtered[df_filtered['Churn Category'].isin(top_churn_categories.index)]
            if not top_category_data.empty:
                lat_center = top_category_data['Latitude'].mean()
                lon_center = top_category_data['Longitude'].mean()

                fig_map_category = px.scatter_mapbox(
                    top_category_data,
                    lat="Latitude", lon="Longitude",
                    color="Churn Category",
                    hover_name="Customer ID",
                    hover_data=["Age", "Contract"],
                    color_discrete_sequence=px.colors.qualitative.Vivid,
                    zoom=3.5
                )
                fig_map_category.update_layout(
                    mapbox_style="carto-positron",
                    mapbox_center={"lat": lat_center, "lon": lon_center}
                )
                st.plotly_chart(fig_map_category, use_container_width=True)
            else:
                st.info("No geographical data available for this selection.")
        else:
            st.info("No geographical data available for mapping.")

    with st.expander("üí° Clique para ver insights sobre categorias de churn"):
        st.subheader("üìå Tend√™ncias gerais de churn")
        st.write("**Conclus√£o:** A influ√™ncia da concorr√™ncia √© a principal raz√£o para o cancelamento.")
    
        st.subheader("üìå Tend√™ncias de cancelamento entre homens")
        st.write("**Conclus√£o:** Os clientes do sexo masculino cancelam principalmente devido √† influ√™ncia da concorr√™ncia e insatisfa√ß√£o dos servi√ßos.")
    
        st.subheader("üìå Tend√™ncias de cancelamento entre mulheres")
        st.write("**Conclus√£o:** As clientes do sexo feminino t√™m maior probabilidade de cancelar devido √† influ√™ncia da concorr√™ncia e aos pre√ßos.")


    with st.expander("üåç Clique para ver insights do Mapa de Distribui√ß√£o Geogr√°fica do Cancelamento"):

        st.subheader("üìç Concentra√ß√£o elevada de cancelamentos em √°reas urbanas")
        st.write("**Observa√ß√£o:** A maioria dos cancelamentos est√° concentrada em cidades altamente povoadas ((San francisco, Los angeles e San Diego)), "
            "indicando que os clientes urbanos t√™m maior probabilidade de mudar de fornecedor devido ao aumento da concorr√™ncia.")
        
        st.subheader("üèÜ Influ√™ncia da concorr√™ncia √© um fator-chave em todas as regi√µes")
        st.write("**Observa√ß√£o:** A categoria de cancelamento mais frequente √© '**Concorr√™ncia**' (pontos laranja), sugerindo "
            "que muitos clientes est√£o a mudar para outros fornecedores de servi√ßo.")
        
        st.subheader("üìû Insatisfa√ß√£o e problemas com o atendimento ao cliente variam por localiza√ß√£o")
        st.write("**Observa√ß√£o:** Os pontos roxos (Atitude) e azuis (Insatisfa√ß√£o) est√£o distribu√≠dos por v√°rias regi√µes, "
            "indicando que **a qualidade do servi√ßo e as intera√ß√µes com os clientes variam conforme a localiza√ß√£o**.")
        
        st.subheader("üí∞ Preocupa√ß√µes com pre√ßos est√£o mais uniformemente distribu√≠das")
        st.write("**Observa√ß√£o:** Os pontos verdes (Pre√ßo) est√£o distribu√≠dos de forma homog√©nea no mapa, "
            "indicando que **a sensibilidade ao pre√ßo n√£o est√° restrita a uma localiza√ß√£o espec√≠fica**.")


col3, col4 = st.columns(2)

with col3:
    st.markdown("### üèÜ 10 principais motivos de churn")
    df_top_reasons = top_churn_reasons.reset_index()
    df_top_reasons.columns = ['Churn Reason', 'Count']
    st.dataframe(df_top_reasons, hide_index=True)

with col4:
    st.markdown("### üåç Distribui√ß√£o geogr√°fica das 5 principais motivos de churn")
    if 'Latitude' in df_filtered.columns and 'Longitude' in df_filtered.columns:
        top_reason_data = df_filtered[df_filtered['Churn Reason'].isin(top_churn_reasons.index)]
        if not top_reason_data.empty:
            lat_center = top_reason_data['Latitude'].mean()
            lon_center = top_reason_data['Longitude'].mean()

            fig_map = px.scatter_mapbox(
                top_reason_data,
                lat="Latitude", lon="Longitude",
                color="Churn Reason",
                hover_name="Customer ID",
                hover_data=["Age", "Contract"],
                color_discrete_sequence=px.colors.qualitative.Pastel,
                zoom=3.5
            )
            fig_map.update_layout(
                mapbox_style="carto-positron",
                mapbox_center={"lat": lat_center, "lon": lon_center}
            )
            st.plotly_chart(fig_map, use_container_width=True)
        else:
            st.info("No geographical data available for this selection.")
    else:
        st.info("No geographical data available for mapping.")

with st.expander("üí° Clique para ver insights sobre cancelamento por g√©nero"):
    st.subheader("üìå Cancelamento entre mulheres")
    st.write("**Conclus√£o:** As mulheres cancelam principalmente devido aos pre√ßos da concorr√™ncia e √† qualidade dos dispositivos.")

    st.subheader("üìå Cancelamento entre homens")
    st.write("**Conclus√£o:** A qualidade dos dispositivos √© a principal preocupa√ß√£o dos clientes do sexo masculino.")

with st.expander("üåç Clique para ver insights do Mapa de Distribui√ß√£o Geogr√°fica do Cancelamento"):
    st.subheader("üìç Concentra√ß√£o elevada de cancelamentos em √°reas urbanas")
    st.write("**Observa√ß√£o:** A maioria dos cancelamentos est√° concentrada em cidades altamente povoadas (San francisco, Los angeles e San Diego).")

    st.subheader("üèÜ Influ√™ncia da concorr√™ncia √© um fator-chave em todas as regi√µes")
    st.write("**Observa√ß√£o:** A categoria de cancelamento mais frequente √© 'Concorr√™ncia'.")

    st.subheader("üìû Insatisfa√ß√£o e problemas com o atendimento ao cliente variam por localiza√ß√£o")
    st.write("**Observa√ß√£o:** Os pontos roxos (Atitude) e azuis (Insatisfa√ß√£o) est√£o espalhados por diferentes regi√µes.")

    st.subheader("üí∞ Preocupa√ß√µes com pre√ßos est√£o mais uniformemente distribu√≠das")
    st.write("**Observa√ß√£o:** Os pontos verdes (Pre√ßo) est√£o amplamente distribu√≠dos no mapa.")


st.write("---")

# ----------------------------------------------------
# Section 3: Understanding Churned Customers
# ----------------------------------------------------
st.subheader("Quest√£o 3: Qual deve ser a estrat√©gia para reduzir o cancelamento?")

if not df_filtered.empty:
    # Categorizing Age Groups
    def age_category(age):
        if age < 30:
            return 'Jovens (Menores que 30 anos)'
        elif 30 <= age < 50:
            return 'Adultos (Entre 30-50 anos)'
        else:
            return 'Seniors(Maiores de 50 anos)'

    df_filtered['Age Group'] = df_filtered['Age'].apply(age_category)

    # Count churned customers per Age Group
    churn_counts_by_age = df_filtered['Age Group'].value_counts().reset_index()
    churn_counts_by_age.columns = ['Age Group', 'Churn Count']

    # Calculate total churned customers
    total_churned = df_filtered.shape[0]

    # Calculate churn percentage for each Age Group
    churn_counts_by_age['Churn Percentage'] = (churn_counts_by_age['Churn Count'] / total_churned) * 100

    # Create a single-line summary with percentages side by side
    churn_summary = " | ".join(
        [f"‚úÖ **{row['Age Group']}**: {row['Churn Percentage']:.2f}%" for _, row in churn_counts_by_age.iterrows()]
    )

    # Display the summary in a single line
    st.subheader("üìä Taxa de churn por faixa et√°ria")
    st.markdown(f"**{churn_summary}**")

else:
    st.warning("No churned customers found based on the selected filters. Try adjusting the filters.")
    
# Creating Pie Charts
age_groups = df_filtered['Age Group'].unique()
cols = st.columns(len(age_groups))

for i, age_group in enumerate(age_groups):
    churn_reasons = df_filtered[df_filtered['Age Group'] == age_group]['Churn Category'].value_counts()
    
    if not churn_reasons.empty:
        fig = go.Figure(
            go.Pie(
                labels=churn_reasons.index,
                values=churn_reasons.values,
                hole=0.4,  # Donut-style
                marker=dict(colors=["#E63946", "#457B9D", "#F4A261", "#2A9D8F", "#8D99AE"]),
            )
        )
        fig.update_layout(title=f"Churn Reasons - {age_group}")

        with cols[i]:
            st.plotly_chart(fig, use_container_width=True)

# Expander Section for Insights
with st.expander("üí° Clique para ver insights sobre cancelamento por idade e motivo"):

    # **Tend√™ncias gerais de cancelamento**
    st.subheader("üìå Tend√™ncias gerais de cancelamento")
    st.write(
        "**Conclus√£o:** A maioria dos clientes que cancelam pertencem ao grupo et√°rio **Seniores (~50%)**, "
        "com o principal motivo sendo **Concorr√™ncia**, seguido por **Pre√ßo** e **Insatisfa√ß√£o**."
    )

    # **Cancelamento por faixa et√°ria**
    st.subheader("üìä Cancelamento por Faixa Et√°ria")

    st.markdown("""
    - **Seniores (50+ anos)**: Apresentam a maior taxa de cancelamento (~50%). Os principais motivos incluem:
        - Influ√™ncia da concorr√™ncia com ofertas mais atrativas.
        - Insatisfa√ß√£o com a experi√™ncia do servi√ßo.

    - **Adultos (30-50 anos)**: Representam cerca de **33%** dos cancelamentos, sendo mais sens√≠veis a:
        - Pre√ßos elevados e busca por planos mais baratos.
        - Qualidade do servi√ßo e atendimento impactando a decis√£o de troca.

    - **Jovens (<30 anos)**: S√£o os que menos cancelam (~16%), mas ainda assim enfrentam:
        - Maior propens√£o a trocar de provedor frequentemente.
        - Prefer√™ncia por planos flex√≠veis e sem fideliza√ß√£o.
    """)

st.write('---')
    
# Preprocess data for Tenure Group
df_filtered = preprocess_data(df_filtered)

# Ensure 'Contract' column exists before processing
if 'Contract' in df_filtered.columns:
    # Count churned customers per Contract Type
    churn_counts_by_contract = df_filtered['Contract'].value_counts().reset_index()
    churn_counts_by_contract.columns = ['Contract Type', 'Churn Count']

    # Calculate churn percentage for each Contract Type
    churn_counts_by_contract['Churn Percentage'] = (churn_counts_by_contract['Churn Count'] / total_churned) * 100

    # Create a single-line summary for Contract Types
    churn_summary_contract = " | ".join(
        [f"üìú **{row['Contract Type']}**: {row['Churn Percentage']:.2f}%" for _, row in churn_counts_by_contract.iterrows()]
    )

    # Display the combined summary
    st.markdown(f"üìú **By Contract Type:** {churn_summary_contract}")
    
# Display the gold line chart
plot_cltv_trend(df_filtered)

# Adicionar um expansor com insights adicionais sobre CLTV por grupo de tempo de perman√™ncia
with st.expander("üîç Clique para ver insights sobre CLTV por grupo de perman√™ncia"):

    st.subheader("‚ö° CLTV de curta perman√™ncia (0‚Äì6 meses)")
    st.write("**Observa√ß√£o:** Clientes rec√©m-chegados (0‚Äì6 meses) tendem a ter um CLTV mais baixo‚Äî"
        "isto pode refletir ciclos de fatura√ß√£o curtos, ofertas introdut√≥rias ou utiliza√ß√£o limitada.")

    st.subheader("üìà CLTV de m√©dia perman√™ncia (7‚Äì36 meses)")
    st.write("**Observa√ß√£o:** O CLTV tende a aumentar gradualmente entre os 7 e 36 meses, √† medida que os clientes "
        "adotam mais servi√ßos ou op√ß√µes de pacotes.")

    st.subheader("üèÜ CLTV de longa perman√™ncia (49‚Äì60 meses)")
    st.write("**Observa√ß√£o:** H√° frequentemente um pico na faixa dos 49‚Äì60 meses, indicando que "
        "os clientes de longa dura√ß√£o veem mais valor e gastam mais.")

    st.subheader("üîÑ Estabiliza√ß√£o ou ligeira queda ap√≥s 61+ meses")
    st.write("**Observa√ß√£o:** Alguns clientes mais antigos podem estabilizar ou reduzir ligeiramente os gastos‚Äî"
        "podem j√° n√£o precisar de servi√ßos adicionais ou estar a explorar alternativas.")

st.write('### üìå Qual deve ser a estrat√©gia para reduzir o cancelamento?')

with st.expander("üí° Clique para ver sugest√µes detalhadas de estrat√©gia"):

    st.markdown("## **Vis√£o geral das recomenda√ß√µes**")

    # Insights sobre cancelamento por faixa et√°ria
    st.subheader("üìå Insights sobre cancelamento por faixa et√°ria")
    st.write("**Estrat√©gia:** Considere **campanhas de ofertas especiais para seniores/fam√≠lias ou pacotes com descontos de longo prazo** para manter clientes de alto valor.")

    # Insights sobre cancelamento por tipo de contrato
    st.subheader("üìå Insights sobre cancelamento por tipo de contrato")
    st.write("**Estrat√©gia:** Ofere√ßa **experi√™ncias de onboarding eficazes e incentivos iniciais** para clientes com contratos mensais, promovendo a lealdade desde o in√≠cio.")
    st.write("**Estrat√©gia:** Incentive **a venda cruzada de servi√ßos adicionais, upgrades a meio do contrato ou recompensas de lealdade** para aumentar o valor do cliente.")

    # Fatores-chave do cancelamento e estrat√©gias
    st.markdown("### **Fatores-chave do cancelamento e estrat√©gias para os mitigar**")

    # Cancelamento motivado pela concorr√™ncia
    st.markdown("#### ‚úîÔ∏è **Cancelamento devido √† concorr√™ncia**")
    st.write("**Estrat√©gia:** Reforce **os programas de lealdade** e ofere√ßa **pacotes competitivos** para reter clientes.")

    # Cancelamento por insatisfa√ß√£o
    st.markdown("#### üìâ **Cancelamento devido √† insatisfa√ß√£o**")
    st.write("**Estrat√©gia:** Melhore **a qualidade do servi√ßo, a cobertura da rede e a experi√™ncia do cliente** para reduzir o cancelamento por insatisfa√ß√£o.")

    # Cancelamento relacionado ao atendimento ao cliente
    st.markdown("#### ü§ù **Cancelamento devido ao atendimento ao cliente**")
    st.write("**Estrat√©gia:** Invista em **forma√ß√£o regional para equipas de suporte** e **otimiza√ß√£o do atendimento ao cliente**.")

    # Cancelamento baseado na localiza√ß√£o
    st.markdown("#### üåç **Tend√™ncias de cancelamento por localiza√ß√£o**")
    st.write("**Estrat√©gia:** Implemente **ofertas de reten√ß√£o baseadas na localiza√ß√£o**, direcionadas para √°reas urbanas com altas taxas de cancelamento.")

    # Preocupa√ß√µes com pre√ßos
    st.markdown("#### üí∞ **Preocupa√ß√µes com pre√ßos e perce√ß√£o de valor**")
    st.write("**Estrat√©gia:** Introduza **planos de pre√ßos** e **descontos regionais espec√≠ficos** para melhorar a acessibilidade e reten√ß√£o.")

    # Reten√ß√£o de clientes de alto valor
    st.markdown("#### üèÜ **Reten√ß√£o de clientes de alto valor e longo prazo**")
    st.write("**Estrat√©gia:** Ofere√ßa **benef√≠cios de lealdade, linhas de suporte VIP ou upgrades de dispositivos** para premiar e reter estes clientes valiosos.")

    # **Observa√ß√µes Finais**
    st.subheader("üîç Observa√ß√µes Finais")
    st.write("Clientes **seniores e adultos de meia-idade** s√£o os mais propensos a cancelar devido √† concorr√™ncia e √† insatisfa√ß√£o com o servi√ßo. "
        "J√° os **jovens adultos** buscam maior flexibilidade, preferindo contratos de curto prazo.")
 

st.write('---')
